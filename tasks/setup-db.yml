---
- name: Ensure that the database server is started
  service:
    name: "{{ svxportal_db_service }}"
    state: started
    enabled: yes

- name: "Ensure that database '{{ svxportal_db_name }}' is created"
  mysql_db:
    name: "{{ svxportal_db_name }}"
    login_unix_socket: "{{ svxportal_db_sock }}"
    state: present
  register: db_create

- name: Upload the default database schema if database was just created
  copy:
    src: "{{ svxportal_src_dir }}/sql/svx.sql"
    dest: "/tmp/svx.sql"
    owner: root
    group: root
    mode: 0640
  when: db_create.changed

- name: Load the default database schema if database was just created
  mysql_db:
    name: "{{ svxportal_db_name }}"
    login_unix_socket: "{{ svxportal_db_sock }}"
    target: "/tmp/svx.sql"
    state: import
  when: db_create.changed


### Handle talkgroups

- name: Get current talkgroup setup
  command: >
    mysql --user={{ svxportal_db_user }}
          --password={{ svxportal_db_password }}
          {{ svxportal_db_name }}
          --batch --skip-column-names --protocol=socket
          --socket={{ svxportal_db_sock }}
          --execute="SELECT * FROM Talkgroup"
  check_mode: False
  changed_when: False
  register: get_current_talkgroups

- name: Populate the current_talkgroups data structure
  set_fact:
    current_talkgroups: >-
      {% set x = item.split('\t') -%}
      {{ (current_talkgroups|d([])) + [{
        'tg':     x[1]|int,
        'name':   x[2],
        'color':  x[3]
        }] }}
  loop: "{{ get_current_talkgroups.stdout_lines }}"

- name: Find out which talkgroups to add and remove
  set_fact:
    remove_talkgroups: >-
      {{ (current_talkgroups|d([])) | difference(svxportal_talkgroups|d([])) }}
    add_talkgroups: >-
      {{ svxportal_talkgroups|d([]) | difference(current_talkgroups|d([])) }}

- name: Remove the following talkgroups
  debug: var=remove_talkgroups

- name: Add the following talkgroups
  debug: var=add_talkgroups


### Handle web users

- name: Get current user list setup
  command: >
    mysql --user={{ svxportal_db_user }}
          --password={{ svxportal_db_password }}
          {{ svxportal_db_name }}
          --batch --skip-column-names --protocol=socket
          --socket={{ svxportal_db_sock }}
          --execute="SELECT * FROM users"
  check_mode: False
  changed_when: False
  register: get_current_users

- name: Populate the current_users data structure
  set_fact:
    current_users: >-
      {% set x = item.split('\t') -%}
      {{ (current_users|d([])) + [{
        'username': x[1],
        'password': x[2],
        'level':  x[3]|int,
        'is_admin': x[4]|bool,
        'firstname': x[5],
        'lastname': x[6]
        }] }}
  loop: "{{ get_current_users.stdout_lines }}"

- name: Find out which users to add and remove
  set_fact:
    remove_users: >-
      {{ (current_users|d([])) | difference(svxportal_users|d([])) }}
    add_users: >-
      {{ svxportal_users|d([]) | difference(current_users|d([])) }}

- name: Remove the following users
  debug: var=remove_users

- name: Add the following users
  debug: var=add_users

- name: Copy SQL update script to the database server
  template:
    src: svxportal-ansible.sql.j2
    dest: /tmp/svxportal-ansible.sql
    mode: 0600
  when: >-
    add_talkgroups|length + remove_talkgroups|length > 0 or
    add_users|length + remove_users|length > 0

- name: Load SQL database updates
  mysql_db:
    name: "{{ svxportal_db_name }}"
    login_unix_socket: "{{ svxportal_db_sock }}"
    target: "/tmp/svxportal-ansible.sql"
    state: import
  when: >-
    add_talkgroups|length + remove_talkgroups|length > 0 or
    add_users|length + remove_users|length > 0

- name: Create DB user for the web application to use
  mysql_user:
    name: "{{ svxportal_db_user }}"
    password: "{{ svxportal_db_password }}"
    priv: "{{ svxportal_db_name }}.*:ALL"
    login_unix_socket: "{{ svxportal_db_sock }}"
    state: present
  no_log: True
